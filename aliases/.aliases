alias save='git add . ; git commit -m '
alias public_ip='curl https://canihazip.com/s && echo ""' # my external ip
alias private_ip='ip -c addr show'
alias octave='octave-cli'
alias svim='sudo vim'
alias push='pushd .'
alias pop='popd'
alias cleanpackages='sudo pacman -Rns $(pacman -Qtdq)'
alias pwd_end_bit="pwd | sed 's#.*/##'"
alias pwd_from_within='echo $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )'
alias fcrm='\rm -rf'
# alias webpd='wget -k -p -r' 
alias webpd='wget -np -N -E -k -p -r -l5'
alias xo='xdg-open'
alias check_network='nmap -sn 192.168.1.0/24'
alias check_all_ports='sudo nmap -n -PN -sT -sU -p-'
#alias fixpermitions='chmod -x+X -R'
alias matlab='matlab -nodisplay -nosplash'
alias pixelcolour='grabc'
alias start='sudo systemctl restart'
alias ustart='systemctl restart --user'
alias stop='sudo systemctl stop'
alias ustop='systemctl stop --user'
alias status='systemctl status'
alias statusu='systemctl status --user'
alias loop='watch -n 5'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias diskspace='df -h'
alias filespace='du -sch'
alias rg='ranger --choosedir=$HOME/.local/share/rangerdir;cd "$(cat $HOME/.local/share/rangerdir)"'
alias allprocesses='ps axjf'
alias memcheck='valgrind --tool=memcheck --leak-check=full --show-leak-kinds=all --track-origins=yes'


expand_cur_dir () { echo $( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ) }

smpv () {
    #mpv --cache=2048 --ontop --no-border --force-window --autofit=500x280 --geometry=-15-50
    mpv --ontop --force-window --autofit=625x350 --geometry=-15-50 "$@"
}

# This function takes only 1 argument: either a file or a directory, and fixes
# it's permitions
fixpermitions () {
    if [ -d "$1" ]
    then
        chmod 755 "$1";
        cd $1 ;
        while read -r i ; do
            if [ -z $i  ] ; then  break; fi
            fixpermitions "$i"
        done <<< $(ls -A -1)
        cd ..;
    else
        chmod 644 "$1";
    fi
}

# Hilights a word without filtering
hl () { grep -E "^|$1" --color='always' ;}

# Specific stuff to a computer goes here
#{{{
function spec ()
{
    # Necessary procedure to protect user's hostname
    local NAME=$(hostname);
    local STRING=$(echo $NAME | sha1sum);
    local HASH=$(echo $STRING | head -n1 | awk '{print $1;}');
    case $HASH in
        2e11ce400c7286cd8a45a235dfeb28678a3e944f)
            alias go='gio open' 
            alias rm='gio trash'
    esac
}
spec   # And now we run the function
#}}}

# extract - archive extractor 
# usage: ex <file>
#{{{
function ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar)        tar -xf $1                  ;;
      *.tar.xz)     tar -xJf $1                 ;;
      *.txz)        tar -xJf $1                     ;;
      *.tar.bz2)    tar -xjf $1                 ;;
      *.tbz2)       tar -xjf $1                 ;;
      *.tar.gz)     tar -xzf $1                 ;;
      *.tgz)        tar -xzf $1                 ;;
      *.tar.pixz)   tar -Ipixz -xf $1               ;;
      *.tpxz)       tar -Ipixz -xf $1               ;;
      *.xz)     xz -d $1                    ;;
      *.pixz)       pixz -d $1                  ;;
      *.gz)     gunzip $1                   ;;
      *.bz2)        bunzip2 $1                  ;;
      *.rar)        unrar x $1                  ;;
      *.zip)        unzip $1 -d $( echo  $1 | sed 's/.zip//' )  ;;
      *.Z)      uncompress $1               ;;
      *.7z)     7z x $1                 ;;
      *)        echo "'$1' cannot be extracted via ex"  ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
#}}}

# zip a directory
# usage - zipdir <directory>
# {{{
function zipdir()
{
    if [ -d $1 ] ; then
    zip
    fi
}
# }}}

# tsm - transmission-remote aliases
# usage - tsm ...
# {{{
# https://www.youtube.com/watch?v=ee4XzWuapsE
tsm() { transmission-remote --list ;}
    # numbers of ip being blocked by the blocklist
    # credit: smw from irc #transmission
tsm-loop() {  watch -n 5 "\
    transmission-remote --list ; [[ \$(transmission-remote --list) == *\"100%\"* ]] && notify-send download_complete \
";}
tsm-notfyifcomplete() {
    if [[ $(transmission-remote --list) == *"100%"* ]] ; then
        notify-send download_complete
    fi
}
tsm-clearcompleted() {
        transmission-remote -l | grep 100% | grep Done | \
        awk '{print $1}' | xargs -n 1 -I % transmission-remote -t % -r ;}
tsm-count() { echo "Blocklist rules:" $(curl -s --data \
    '{"method": "session-get"}' localhost:9091/transmission/rpc -H \
    "$(curl -s -D - localhost:9091/transmission/rpc | grep X-Transmission-Session-Id)" \
    | cut -d: -f 11 | cut -d, -f1) ;}
tsm-blocklist() { $PATH_SCRIPTS/blocklist.sh ;}     # update blocklist
tsm-daemon() { transmission-daemon ;}
tsm-quit() { killall transmission-daemon ;}
tsm-altspeedenable() { transmission-remote --alt-speed ;}   # limit bandwidth
tsm-altspeeddisable() { transmission-remote --no-alt-speed ;}   # dont limit bandwidth
tsm-add() { transmission-remote --add "$1" ;}
tsm-add-here () { transmission-remote -w $(expand_cur_dir) --add "$1" }
tsm-askmorepeers() { transmission-remote -t"$1" --reannounce ;}
tsm-pause() { transmission-remote -t"$1" --stop ;}      # <id> or all
tsm-start() { transmission-remote -t"$1" --start ;}     # <id> or all
tsm-purge() { transmission-remote -t"$1" --remove-and-delete ;} # delete data also
tsm-remove() { transmission-remote -t"$1" --remove ;}       # leaves data alone
tsm-info() { transmission-remote -t"$1" --info ;}
tsm-speed() { while true;do clear; transmission-remote -t"$1" -i | grep Speed;sleep 1;done ;}
# }}}

# use vimpager when available for manpages
[ -f /usr/bin/vimpager ] && export MANPAGER=vimpager

# make files temporarily disappear
# usage - pushf <file>
#         popf 
# {{{
function pushf()
{
    mkdir -p ~/.push
    mv $1 ~/.push
}

function popf()
{
    if [ $(ls -1 ~/.push |wc -l ) -eq 1 ]; then
        mv  ~/.push/* .
        rmdir ~/.push
    fi
}
# }}}

# yt - youtube-dl aliases
# usage - yt [url]
# {{{
yt() { youtube-dl -F "$1" ;}
yt-720p30fps() { youtube-dl -f 247+171 "$1" ;}
yt-720p60fps() { youtube-dl -f 302+171 "$1" ;}
yt-180p30fps() { youtube-dl -f 248+171 "$1" ;}
yt-180p60fps() { youtube-dl -f 303+171 "$1" ;}
# }}}

#multivim
multivim() {
    for i in "$@";
    do
        (xterm -e "vim $i" &)
    done
}

#-------- Sopcast CLI v3 (Streaming P2P Videos) [last updated April 27, 2018] {{{
#------------------------------------------------------
# DEMOv2: http://www.youtube.com/watch?v=Dm7cFjhzgHo
# DEMOv3: https://www.youtube.com/watch?v=Khvo4ge1PLQ
# DESC: watch streaming movies/tv shows over p2p
# FEED: http://www.sopcast.com/chlist.xml
#       http://sopcast.ucoz.com
#       http://streams.magazinmixt.ro
#       google keyword: sop://broker.sopcast
#       https://www.google.com/#tbs=qdr:w&q=sop:%2F%2Fbroker.sopcast

# package:
# Archlinux: sopcast ( x64 https://www.archlinux.org/packages/multilib/x86_64/sopcast/)
# Ubuntu/Debian: sp-auth (https://launchpad.net/~jason-scheunemann/+archive/ppa)

sppc() {
  # choose a player (cvlc is default)
  # SP_VIDPLAYER=cvlc
  # SP_VIDPLAYER=(cvlc --file-caching=10000)
  # SP_VIDPLAYER=(cvlc --video-on-top --width=500 --height=280 --video-x=-15 --video-y=-50)
  # SP_VIDPLAYER=vlc
  # SP_VIDPLAYER=(vlc --control=lirc)
  # SP_VIDPLAYER=mplayer
  # SP_VIDPLAYER=(mplayer -cache 1000)
  # SP_VIDPLAYER=mpv
  # SP_VIDPLAYER=(mpv --cache=1000)
  # SP_VIDPLAYER=(mpv --ontop --no-border --force-window --autofit=500x280 --geometry=-15-50)
  SP_VIDPLAYER=(mpv --cache=2048 --ontop --no-border --force-window --autofit=500x280 --geometry=-15-50)

  # sopcast port
  SP_LOCAL_PORT=55050

  # ip address and port for video player to connect to
  SP_PLAYER_IPADDR=localhost
  SP_PLAYER_PORT=55051

  echo -e "${Red}>>>Kill any exiting sopcast connection ${Color_Off}"
    killall sp-sc &>/dev/null
  echo -e "${Yellow}>>>Loading sopcast connection ${Color_Off}"
    (sp-sc "$1" "$SP_LOCAL_PORT" "$SP_PLAYER_PORT" &>/dev/null &)
  echo -e "${Yellow}>>>Check if sopcast stream is alive at $SP_PLAYER_IPADDR:$SP_PLAYER_PORT [hit Ctrl+C on this screen to exit properly] ${Color_Off}"
    until nc -vzw 2 "$SP_PLAYER_IPADDR" "$SP_PLAYER_PORT"; do sleep 2; done
  echo -e "${Green}>>>Connecting to sopcast stream ${Color_Off}"
    ($SP_VIDPLAYER http://"$SP_PLAYER_IPADDR":"$SP_PLAYER_PORT")
  echo "${On_IRed}>>>Video Player has exited properly. Killing sopcast stream now ${Color_Off}"
    wait
    killall sp-sc
}

# manually kill sopcast (sometimes it doesnt exit properly and still uses bandwidth in the background)
sppc-kill() { killall sp-sc ;}

# channel list
spp-filmbox() { sppc "sop://broker.sopcast.com:3912/148981" ;}
spp-filmcafe() { sppc "sop://broker.sopcast.com:3912/256238" ;}
spp-hbohd() { sppc "sop://51.15.38.157:3912/260710" ;}
spp-idx() { sppc "sop://broker.sopcast.com:3912/256244" ;}
spp-kanald() { sppc "sop://broker.sopcast.com:3912/149258" ;}
spp-minimax() { sppc "sop://broker.sopcast.com:3912/148263" ;}
spp-natgeowild() { sppc "sop://broker.sopcast.com:3912/253037" ;}
spp-nationalgeographic() { sppc "sop://broker.sopcast.com:3912/148248" ;}
spp-nationaltv() { sppc "sop://broker.sopcast.com:3912/253030" ;}
spp-nickelodeon() { sppc "sop://broker.sopcast.com:3912/253472" ;}
spp-paramount() { sppc "sop://broker.sopcast.com:3912/253033" ;}
spp-primatv() { sppc "sop://broker.sopcast.com:3912/148086" ;}
spp-procinema() { sppc "sop://broker.sopcast.com:3912/148249" ;}
spp-protva() { sppc "sop://broker.sopcast.com:3912/149252" ;}
spp-protvb() { sppc "sop://broker.sopcast.com:3912/151380" ;}
spp-realitateatv() { sppc "sop://broker.sopcast.com:3912/253036" ;}
spp-sportro() { sppc "sop://broker.sopcast.com:3912/178547" ;}
spp-tlc() { sppc "sop://broker.sopcast.com:3912/148256" ;}
spp-traveltv() { sppc "sop://broker.sopcast.com:3912/148885" ;}
spp-tv1000() { sppc "sop://broker.sopcast.com:3912/256337/123456" ;}
spp-tvpaprika() { sppc "sop://broker.sopcast.com:3912/148881" ;}
spp-tv1000() { sppc "sop://broker.sopcast.com:3912/256337" ;}
spp-tvr1() { sppc "sop://broker.sopcast.com:3912/148085" ;}
spp-tvr2() { sppc "sop://broker.sopcast.com:3912/173286" ;}
spp-viasathistory() { sppc "sop://broker.sopcast.com:3912/151300" ;}
spp-zutv() { sppc "sop://broker.sopcast.com:3912/148252" ;}

spp-bbc() { sppc "sop://broker.sopcast.com:3912/109227";}
spp-digisport() { sppc "sop://broker.sopcast.com:3912/148886";}

# format channel to functions quicker
# e.g soprip newchannels.txt
soprip() {
  if [ $# -lt 1 ]
  then
    echo -e "turn sopcast channel listing into functions"
    echo -e "copy sopcast list from http://sopcast.ucoz.com/ to text file"
    echo -e "\nUsage:\n$0 <filename.txt>"
    return 1
  fi
  # lowercase list; rm spaces/empty lines; merge name and link
  LIST=$(cat "$1" | tr '[:upper:]' '[:lower:]' | sed 's/ //g' | sed '$!N;s/\n/ /' | sed '/^$/d')
  echo $LIST | while read line; do
    SOPNAME=$(echo $line | awk '{print $1}')
    SOPLINK=$(echo $line | awk '{print $2}')
    # print into functions format
    echo "spp-"$SOPNAME"() { sppc \""$SOPLINK"\" ;}"
  done
}


#}}}
#-------- Acestream CLI (Streaming P2P Videos) {{{
#------------------------------------------------------
# DEMO: https://www.youtube.com/watch?v=dxar7KLsrg8
# DESC: view streaming videos using acestream live feeds
# LINK: https://github.com/jonian/acestream-launcher
# FEED: https://www.google.com/#q=acestream://&tbs=qdr:w
#       http://www.acesoplisting.in/
#       http://arenavision.in/
#       http://streams.magazinmixt.ro/
#       http://www.livefootballol.me/acestream-channel-list-2016-1.html

acestream-cvlc() { acestream-launcher --player cvlc "$@" ;}
acestream-mpv() { acestream-launcher --player mpv "$@" ;}
acestream-mplayer() { acestream-launcher --player mplayer "$@" ;}

# choose a player (default is cvlc)
# ACE_PLAYER=cvlc
ACE_PLAYER=mpv

tv-bbcone-eng() { acestream-launcher --player "$ACE_PLAYER" acestream://955b73334677d32e3a832d092066ab48c67efb7a ;}
tv-tele5-spa() { acestream-launcher --player "$ACE_PLAYER" acestream://97f0eaa031804b7c9f5b7f60599047254d9128b1 ;}
tv-espn-eng() { acestream-launcher --player "$ACE_PLAYER" acestream://5d25598468b68aabc1d908921cea98062c7f8739 ;}
tv-espn-deportes-spa() { acestream-launcher --player "$ACE_PLAYER" acestream://0a0be3253e0374f5f6323391c62b244eed5673c6 ;}
tv-beinsports-fr() { acestream-launcher --player "$ACE_PLAYER" acestream://b5950a56db8f722876dc74443d74b565fb99368f ;}
tv-tennis() { acestream-launcher --player "$ACE_PLAYER" acestream://f3b9d8f1575cf21be3db910af0d4e1a3ae19f3e2 ;}

# }}}


#-------- Universal Package Manager {{{
#------------------------------------------------------
# Forked from Gotbletu
# DEMO: https://www.youtube.com/watch?v=N8CZhlIssdk
# DESC: auto detect package manager and loads proper alias for it

# legends# {{{
# https://wiki.archlinux.org/index.php/Pacman_Rosetta
# http://old-en.opensuse.org/Software_Management_Command_Line_Comparison
# https://bbs.archlinux.org/viewtopic.php?pid=1281605#p1281605
# Arch          -- pacman, yaourt
# Debian/Ubuntu     -- apt-get(apt), aptitude, dpkg
# Gentoo        -- eclean, emerge, equery, layman
# OpenSuse      -- zypper
# Red Hat/Fedora    -- package-cleanup, rpm, yum
# Suse          -- rug
# Not finish, only tested on Debian, Arch, Fedora so far

# cleanold; removes certain packages that can no longer be downloaded
# cleanall; remove all local cached packages
# list; show the content of an installed package
# localinstall; install package manually such as deb, rpm files downloaded
# own; find a command a package belongs to; ex: pkm-own convert
# purge; uninstall package and purge configuration files (not in /home)
# query; search for an already installed package
# refresh; update repository list
# upgrade; install the newest version from the repositories
# hold/unhold; stop/allow a package from being update
#
# missing
# emerge: autoclean, purge, list, query
# rug: pkm-info, clean, autoremove, autoclean, purge, list, query
# zypper: pkm-info, autoremove, autoclean, purge, list, query
# yum: autoclean, purge
# }}}

#find_pkm() { for i;do which "$i" >/dev/null && { echo "$i"; return 0;};done;return 1; }
#export PKMGR=$(find_pkm yaourt pacman pacaur aptitude apt-get yum zypper emerge)
export PKMGR="yay"

# {{{ apt-get
if [ "$PKMGR" = "apt-get" ]; then
  pkm-cleanallall() { sudo apt-get clean ;}
  pkm-cleanallold() { sudo apt-get autoclean ;}
  pkm-dependsreverse() { apt-cache rdepends "$@" ;}
  pkm-download() { wget $(apt-get --print-uris -y install "$@" | grep ^\'| cut -d\' -f2) ;}
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  # same as; echo "pkgname hold" | dpkg --set-selections
  pkm-hold() { sudo apt-mark hold "$@" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { apt-cache show "$@" ;}
  pkm-install() { sudo apt-get install --no-install-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo apt-get purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo apt-get update ;}
  pkm-remove() { sudo apt-get remove "$@" ;}
  pkm-remove-orphans() { sudo apt-get autoclean ;}
  pkm-search() { apt-cache search "$@" ;}
  pkm-unhold() { sudo apt-mark unhold "$@" ;}
  pkm-upgrade() { sudo apt-get update && sudo apt-get upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  # auto get missing gpg keys from launchpad
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
    # these are extra servers, just replace it if one is down
    # keyserver.ubuntu.com
    # pool.sks-keyservers.net
    # subkeys.pgp.net
    # pgp.mit.edu
    # keys.nayr.net
    # keys.gnupg.net
    # wwwkeys.en.pgp.net #(replace with your country code fr, en, de,etc)
# }}}
# {{{ aptitude
elif [ "$PKMGR" = "aptitude" ]; then
  pkm-cleanallall() { sudo aptitude clean ;}
  pkm-cleanallold() { sudo aptitude autoclean ;}
  pkm-dependsreverse() { aptitude why "$@" ;}
  pkm-download() { aptitude download "$@" ;} # need a better 1; deb w/ depends
  pkm-extract() { ar vx "$@" | tar -zxvf data.tar.gz ;}
  pkm-hold() { echo "$1 hold" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /hold/" ;}
  pkm-hold-status() { dpkg --get-selections | awk "/${@:-hold}/" ;}
  pkm-info() { aptitude show "$@" ;}
  pkm-install() { sudo aptitude install --without-recommends "$@" ;}
  pkm-list() { dpkg -L "$@" ;}
  pkm-listcache() { ls -1 /var/cache/apt/archives "$@" && echo "pwd: /var/cache/apt/archives" ;}
  pkm-localinstall() { sudo dpkg -i "$@" ;}
  pkm-own() { dpkg -S $(which "$@") ;}
  pkm-pkgsearch() { apt-file search "$@" ;}
  pkm-purge() { sudo aptitude purge "$@" ;}
  pkm-query() { dpkg --get-selections | grep "$@" ;}
  pkm-refresh() { sudo aptitude update ;}
  pkm-remove() { sudo aptitude remove "$@" ;}
  pkm-remove-orphans() { sudo aptitude autoclean ;}
  pkm-search() { aptitude search "$*" ;}
    # fix  maybe with keyword $@ | sed / / ~d/
  pkm-search-description() { aptitude search ~d"$1"~d"$2"~d"$3"~d"$4"~d"$5"~d"$6"~d"$7" ;}
  pkm-unhold() { echo "$1 install" | sudo dpkg --set-selections && dpkg --get-selections | awk "/$1/ && /install/" ;}
  pkm-upgrade() { sudo aptitude update && sudo aptitude upgrade ;}
  # PPA on ubuntu base distro (not compatible with debian)
  ppa-add() { sudo add-apt-repository $@ ;}
  ppa-del() { sudo add-apt-repository -r $@ ;}
  ppa-key() { sudo apt-key add $@ ;}
  ppa-list() { ls /etc/apt/sources.list.d ;}
  ppa-purge() { sudo ppa-purge $@ ;}
  ppa-autokey() { sudo apt-get update 2> /tmp/keymissing; \
    for key in $(grep "NO_PUBKEY" /tmp/keymissing |sed "s/.*NO_PUBKEY //"); \
    do echo -e "\nProcessing key: $key"; gpg --keyserver pool.sks-keyservers.net \
    --recv $key && gpg --export --armor $key | sudo apt-key add -; done ;}
# }}}
# {{{ emerge
elif [ "$PKMGR" = "emerge" ]; then
  pkm-remove-orphans() { sudo emerge --depclean ;}
  pkm-cleanall() { sudo eclean distfiles ;}
  pkm-info() { emerge -S "$@" ;}
  pkm-install() { sudo emerge "$@" ;}
  pkm-pkgsearch() { equery belongs "$@" ;}
  pkm-refresh() { sudo layman -f ;}
  pkm-remove() { sudo emerge -C "$@" ;}
  pkm-search() { emerge -S "$@" ;}
  pkm-upgrade() { sudo emerge -u world ;}
# }}}
# {{{ pacaur
elif [ "$PKMGR" = "pacaur" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { pacaur -Sc ;}
  pkm-cleanold() { pacaur -Scc ;}
  if type -p downgrade > /dev/null; then
    # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    pacaur -Qi $arg 2> /dev/null \
    || pacaur -Si $arg; done ;}
  pkm-install() { pacaur --noconfirm -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacaur -Qql "$@" ;}
  pkm-listinstalled() { pacaur -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { pacaur -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacaur -Qs "$@" ;}
  pkm-refresh() { pacaur -Syy ;}
  pkm-remove() { pacaur -Rcs "$@" ;}
  pkm-remove-nodepends() { pacaur -Rdd "$@" ;}
  pkm-remove-orphans() { pacaur -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacaur -Qs "$@" && pacaur -s "$@" ;}
  pkm-search-local() { pacaur -Qs "$@" ;}
  pkm-upgrade() { pacaur -Syu ;}    # upgrade everything except aur package
  pkm-upgrade-aur() { pacaur --noconfirm -Sbua ;} # only upgrade aur package
# }}}
# {{{ pacman
elif [ "$PKMGR" = "pacman" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { sudo pacman -Sc ;}
  pkm-cleanold() { sudo pacman -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;}
  pkm-info() { for arg in "$@"; do
    pacman -Qi $arg 2> /dev/null \
    || pacman -Si $arg; done ;}
  pkm-install() { sudo pacman -S "$@" ;}
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { pacman -Qql "$@" ;}
  pkm-listinstalled() { pacman -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { sudo pacman -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { pacman -Qs "$@" ;}
  pkm-refresh() { sudo pacman -Syy ;}
  pkm-remove() { sudo pacman -Rcs "$@" ;}
  pkm-remove-nodepends() { sudo pacman -Rdd "$@" ;}
  pkm-remove-orphans() { sudo pacman -Rs $(pacman -Qqtd) ;}
  pkm-search() { pacman -Ss "$@" ;}
  pkm-search-local() { pacman -Qs "$@" ;}
  pkm-upgrade() { sudo pacman -Syu ;}
# }}}
# {{{ rug
elif [ "$PKMGR" = "rug" ]; then
  pkm-install() { sudo rug install "$@" ;}
  pkm-refresh() { sudo rug refresh ;}
  pkm-remove() { sudo rug remove "$@" ;}
  pkm-search() { rug search "$@" ;}
  pkm-upgrade() { sudo rug update ;}
# }}}
# {{{ yay
elif [ "$PKMGR" = "yay" ]; then
  pkm-build() { tar xvzf "$1" && cd "${1%%.tar.gz}" && makepkg -csi ;}
  pkm-cleanall() { yay -Sc ;}
  pkm-cleanold() { yay -Scc ;}
  if type -p downgrade > /dev/null; then
  # require: https://aur.archlinux.org/packages/downgrade/
    pkm-downgrade() { downgrade "$@" ;}
  fi
  pkm-download() { sudo pacman -Sw "$@" ;} # need better shit to dl from aur also
  pkm-info() { for arg in "$@"; do
    yay -Qi $arg 2> /dev/null \
    || yay -Si $arg; done ;}
  pkm-install() { yay -S "$@" ;}
  # https://wiki.archlinux.org/index.php/Pacman-key#Resetting_all_the_keys
  pkm-key() { sudo pacman-key --init \
    && sudo pacman-key --populate archlinux \
    && sudo pacman-key --refresh-keys ;}
  pkm-list() { yay -Qql "$@" ;}
  pkm-listinstalled() { yay -Qe ;}
  pkm-listcache() { ls -1 /var/cache/pacman/pkg "$@" && echo "pwd: /var/cache/pacman/pkg" ;}
  pkm-localinstall() { sudo pacman --noconfirm -U "$@" ;}
  pkm-own() { pacman -Qo "$@" ;}
  pkm-pkgsearch() { pkgfile -s "$@" ;}
  pkm-purge() { yay -R "$@" ;}
  pkm-query() { pacman -Qqs "$@" ;}
  pkm-query-detail() { yay -Qs "$@" ;}
  pkm-refresh() { yay -Syy ;}
  pkm-remove() { yay -Rcs "$@" ;}
  pkm-remove-nodepends() { yay -Rdd "$@" ;}
  pkm-remove-orphans() { yay -Rs $(pacman -Qqtd) ;}
  pkm-search() { yay --noconfirm "$@" ;}
  pkm-search-local() { yay -Qs "$@" ;}
  pkm-upgrade() { yay -Syu --devel ;}   # upgrade everything except aur package
  pkm-listfiles() { yay -Ql "$@"; }
# }}}
# {{{ yum
elif [ "$PKMGR" = "yum" ]; then
  pkm-cleanall() { sudo yum clean ;}
  pkm-depends() { sudo yum deplist "$@" ;}
  pkm-dependsreverse() { sudo yum resolvedep "$@" ;}
  pkm-info() { for arg in "$@"; do
    rpm -qi $arg 2> /dev/null || yum info $arg; done ;}
  pkm-install() { sudo yum install "$@" ;}
  pkm-list() { for arg in "$@"; do
    rpm -ql $arg 2> /dev/null || repoquery -ql --plugins $arg; done ;}
  pkm-localinstall() { sudo yum localinstall "$@" ;}
  pkm-own() { rpm -qf $(which "$@") ;}
  pkm-pkgsearch() { yum whatprovides "$@" ;}
  pkm-query() { rpm -q "$@" ;}
  pkm-refresh() { sudo yum clean expire-cache && sudo yum check-update ;}
  pkm-remove() { sudo yum remove "$@" ;}
  pkm-remove-orphans() { sudo package-cleanup --leaves ;}
  pkm-search() { yum search "$@" ;}
  pkm-upgrade() { sudo yum update ;}
# }}}
# {{{ zypper
elif [ "$PKMGR" = "zypper" ]; then
  pkm-cleanall() { sudo zypper clean ;}
  pkm-install() { sudo zypper install "$@" ;}
  pkm-pkgsearch() { zypper what-provides "$@" ;}
  pkm-refresh() { sudo zypper refresh ;}
  pkm-remove() { sudo zypper remove "$@" ;}
  pkm-search() { zypper search "$@" ;}
  pkm-upgrade() { sudo zypper update ;}
fi
# }}}

#}}}


# usermount

usermount-iso() { udevil mount "$1" ;}
userumount-iso() { udevil unmount "$1" ;}
usermount-usb() { udisksctl mount -b "$1" ;}
usermount-usb() { udisksctl unmount -b "$1" ;}

# aspell
spellchk-tex-pt() { for i in "$@"; do aspell -t --lang=pt_PT -c "$i";done; }
spellchk-plain-pt() { for i in "$@"; do aspell --lang=pt_PT -c "$i";done; }
spellchk-plain-de() { for i in "$@"; do aspell --lang=de_DE -c "$i";done; }


beep() { play -qn synth sin G5 trim 0 1; }

# beeps after n minutes
timer-silent() {
    seconds=$1
    let "seconds*=60"
    sleep $seconds ;
    notify-send timer
}
timer-loud() {
    seconds=$1
    let "seconds*=60"
    sleep $seconds ;
    notify-send timer;
    beep;
}
timer-loop-silent() {  
    seconds=$1
    let "seconds*=60"
    watch -n $seconds "\
    notify-send loop timer \
";}


markdownview() {
    pandoc $1 | lynx -stdin
}


tv-skynews() {
    smpv https://youtu.be/XOacA3RYrXk 
}

# for 
#https://stackoverflow.com/questions/26109837/convert-flac-to-mp3-with-ffmpeg-keeping-all-metadata#26109838


# " vim:foldmethod=marker:foldlevel=0:filetype=sh


